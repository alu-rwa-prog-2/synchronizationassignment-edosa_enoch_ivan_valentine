#include<stdio.h>
#include<stdlib.h>
#include<pthread.h>
#include<unistd.h>
#include <semaphore.h>

#define tray_size 4

int num_of_pizza;

void chef(){
}
void client(){
}

void * add_pizza(void *arg){
    int pthread_mutex_lock(pthread_mutex_t*mutex);
    if (num_of_pizza < tray_size)
    {
        printf("Need to bake more pizza");
        num_of_pizza++;
    }
    else {
        printf("tray is full");
    }

    int pthread_mutex_unlock(pthread_mutex_t *mutex);

}

void * remove_pizza(void *arg){
    int pthread_mutex_lock(pthread_mutex_t*mutex);
    if (num_of_pizza > 1 && num_of_pizza<=4)// check if all Count_to have been arrived at
    {
        printf("take pizza");
        num_of_pizza--;
    }
    else {
        printf("tray is empty");
    }
    int pthread_mutex_unlock(pthread_mutex_t *mutex);
}

int main(){
    pthread_t remove_id, add_id;
    //pthread_t *thread_id = malloc(sizeof(pthread_t) * thread_id);
    //pthread_create(&thread_id[num_of_pizza], NULL, add_pizza, NULL);
    pthread_create(&remove_id, NULL, remove_pizza, NULL);
    pthread_create(&add_id, NULL, add_pizza, NULL);

    pthread_join(remove_id, NULL);
    pthread_join(add_id, NULL);


}
