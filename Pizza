#include<stdio.h>
#include<stdlib.h>
#include<pthread.h>
#include<unistd.h>

#define MIN_PIZZA 0 
#define MAX_PIZZA 5 
pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;

int count = 0;

void * pizza_fun(void *arg){
    for(;;){
        if (count > MIN_PIZZA){
            pthread_mutex_lock (&mutex);
            pizzaCount--;
            printf("User eats Pizza\n");
            printf("Remaining Pizza: %d\n", pizzaCount);
            pthread_mutex_unlock (&mutex);
            sleep(2);
        }

        if (count < MAX_PIZZA){
            pthread_mutex_lock (&mutex);
            pizzaCount++;
            printf("Chef makes Pizza\n");
            printf("Remaining Pizza: %d\n", count);

            pthread_mutex_unlock (&mutex);
            sleep(2);
        }
    }
}


int main(void){
    int i=0;
    pthread_t *thread_group = malloc(sizeof(pthread_t) * 100); 
    for (i=0; i<2; ++i){
        pthread_create(&thread_group[i], NULL, pizza_fun, NULL);
    }

    for (i=0; i<2; ++i){
        pthread_join(thread_group[i], NULL); // wait for all threads to finish
    }
  return EXIT_SUCCESS;
}
